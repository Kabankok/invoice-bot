#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from __future__ import annotations
import os, logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

from store import store_invoice
from keyboards import moderation_keyboard
from moderation import handle_moderation, handle_reason_message

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("main_web_v2")

TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "")
PORT = int(os.environ.get("PORT", "10000"))
if not TOKEN:
    raise SystemExit("TELEGRAM_BOT_TOKEN is missing")
if not WEBHOOK_URL:
    raise SystemExit("WEBHOOK_URL is missing (e.g. https://<name>.onrender.com/webhook)")

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ")

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Webhook: {WEBHOOK_URL}")

async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"–¢–≤–æ–π user_id: {user.id}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ---
def _detect_kind(msg) -> str:
    if getattr(msg, "photo", None):
        return "photo"
    if getattr(msg, "document", None):
        mt = (msg.document.mime_type or "").lower()
        if mt in {"application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}:
            return "excel"
        return "document"
    return "unknown"

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_in = update.message
    kind = _detect_kind(msg_in)

    text = (
        "üìÑ –°—á—ë—Ç –ø–æ–ª—É—á–µ–Ω ‚Äî –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è\n"
        f"–¢–∏–ø: {kind}"
    )
    # —Å–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–û–¢–ê (–Ω–∞ –Ω—ë–º –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å)
    sent = await msg_in.reply_text(
        text,
        reply_markup=moderation_keyboard(msg_in.chat_id, 0)  # –≤—Ä–µ–º–µ–Ω–Ω–æ 0, —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∏–∂–µ
    )
    # —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º status_msg_id (—ç—Ç–æ id 'sent')
    await context.bot.edit_message_reply_markup(
        chat_id=sent.chat_id,
        message_id=sent.message_id,
        reply_markup=moderation_keyboard(sent.chat_id, sent.message_id)
    )
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –ò–î —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ë–û–¢–ê
    store_invoice(sent.message_id, status="WAIT", kind=kind)

# --- Main ---
def main():
    app = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("debug", debug))
    app.add_handler(CommandHandler("whoami", whoami))

    # —Ñ–∞–π–ª—ã
    app.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO, handle_file))

    # –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    app.add_handler(CallbackQueryHandler(handle_moderation))

    # –ø—Ä–∏—ë–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–æ–¥–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reason_message))

    # –∑–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/webhook",
        webhook_url=WEBHOOK_URL,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

