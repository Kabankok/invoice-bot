# main_web_v2.py
# -----------------------------
# 1) –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–µ–±—Ö—É–∫ Telegram: /webhook –∏ /webhook/<secret>
# 2) Health-check: /healthz
# 3) –ê–≤—Ç–æ-—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω WEBHOOK_URL)
# 4) –§–∏–ª—å—Ç—Ä—ã ALLOWED_CHAT_ID / ALLOWED_TOPIC_ID
# 5) –ú–∏–Ω–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞)
# -----------------------------

import os
import json
import logging
from typing import Any, Dict, Optional

from flask import Flask, request, abort, jsonify
from urllib.parse import urlencode
import urllib.request

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
log = logging.getLogger("tg-webhook")

# ---------- ENV ----------
def get_env() -> Dict[str, str]:
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ BOT_TOKEN, –∏ TELEGRAM_BOT_TOKEN (—á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å Render)
    bot_token = (os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN") or "").strip()
    webhook_url = (os.getenv("WEBHOOK_URL") or "").strip()
    webhook_secret = (os.getenv("WEBHOOK_SECRET") or "").strip()

    allowed_chat_id = (os.getenv("ALLOWED_CHAT_ID") or "").strip()
    allowed_topic_id = (os.getenv("ALLOWED_TOPIC_ID") or "").strip()

    if not bot_token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN (–∏–ª–∏ TELEGRAM_BOT_TOKEN) –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    # WEBHOOK_URL –ù–ï –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî –Ω–æ –±–µ–∑ –Ω–µ–≥–æ –∞–≤—Ç–æ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è.
    return {
        "BOT_TOKEN": bot_token,
        "WEBHOOK_URL": webhook_url,
        "WEBHOOK_SECRET": webhook_secret,
        "ALLOWED_CHAT_ID": allowed_chat_id,
        "ALLOWED_TOPIC_ID": allowed_topic_id,
    }

ENV = get_env()

# ---------- UTILS ----------
def tg_api_request(method: str, data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –í—ã–∑–æ–≤ Telegram Bot API –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫.
    """
    url = f"https://api.telegram.org/bot{ENV['BOT_TOKEN']}/{method}"
    body = urlencode(data).encode("utf-8")
    req = urllib.request.Request(url, data=body, headers={"Content-Type": "application/x-www-form-urlencoded"})
    with urllib.request.urlopen(req, timeout=20) as resp:
        raw = resp.read().decode("utf-8")
        try:
            return json.loads(raw)
        except Exception:
            log.error("TG API invalid JSON: %s", raw)
            return {"ok": False, "raw": raw}

def set_webhook_if_needed() -> None:
    """
    –ï—Å–ª–∏ –∑–∞–¥–∞–Ω WEBHOOK_URL ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫ –≤ Telegram.
    """
    if not ENV["WEBHOOK_URL"]:
        log.info("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞ (—Å–µ—Ä–≤–µ—Ä –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–¥–Ω—è—Ç).")
        return

    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º secret-–ø—É—Ç—å, –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–≥–æ.
    if ENV["WEBHOOK_SECRET"]:
        if not ENV["WEBHOOK_URL"].rstrip("/").endswith(f"/{ENV['WEBHOOK_SECRET']}"):
            log.warning(
                "WEBHOOK_SECRET –∑–∞–¥–∞–Ω, –Ω–æ WEBHOOK_URL –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ '/%s'. "
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å URL –≤–∏–¥–∞ .../webhook/%s",
                ENV["WEBHOOK_SECRET"], ENV["WEBHOOK_SECRET"]
            )

    log.info("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –≤–µ–±—Ö—É–∫ Telegram: %s", ENV["WEBHOOK_URL"])
    res = tg_api_request("setWebhook", {"url": ENV["WEBHOOK_URL"]})
    if not res.get("ok"):
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: %s", res)
    else:
        log.info("–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", res)

def send_text(chat_id: int, text: str, message_thread_id: Optional[int] = None) -> None:
    payload = {"chat_id": chat_id, "text": text}
    if message_thread_id:
        payload["message_thread_id"] = message_thread_id
    tg_api_request("sendMessage", payload)

def passes_filters(msg: Dict[str, Any]) -> bool:
    """
    –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ALLOWED_CHAT_ID / ALLOWED_TOPIC_ID, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã.
    """
    if not msg:
        return False

    chat = msg.get("chat") or {}
    chat_id = str(chat.get("id") or "")

    # –î–ª—è —Ç–µ–º (—Ç–æ–ø–∏–∫–æ–≤) –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
    topic_id = msg.get("message_thread_id")
    topic_id_str = str(topic_id) if topic_id is not None else ""

    allowed_chat_id = ENV["ALLOWED_CHAT_ID"]
    allowed_topic_id = ENV["ALLOWED_TOPIC_ID"]

    if allowed_chat_id and chat_id != allowed_chat_id:
        return False
    if allowed_topic_id:
        # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–º–µ ‚Äî —Ç—Ä–µ–±—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ID —Ç–µ–º—ã
        if topic_id_str != allowed_topic_id:
            return False
    return True

def handle_update(update: Dict[str, Any]) -> None:
    """
    –ú–∏–Ω–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç,
    —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–≤–æ–∑–Ω—É—é —Å–≤—è–∑–∫—É Telegram ‚Üí Render ‚Üí Telegram.
    """
    message = update.get("message") or update.get("edited_message") or {}
    if not message:
        log.info("–ù–µ—Ç –ø–æ–ª—è message –≤ –∞–ø–¥–µ–π—Ç–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é.")
        return

    if not passes_filters(message):
        log.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ ALLOWED_*")
        return

    chat = message["chat"]
    chat_id = int(chat["id"])
    thread_id = message.get("message_thread_id")  # –¥–ª—è —Ç–µ–º

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ
    if "document" in message:
        doc = message["document"]
        file_name = doc.get("file_name", "document")
        log.info("–ü–æ–ª—É—á–µ–Ω document: %s", file_name)
        send_text(chat_id, f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file_name}. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.", thread_id)
        return
    elif "text" in message:
        txt = message["text"]
        log.info("–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: %s", txt)
        send_text(chat_id, "üëã –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏. –û—Ç–ø—Ä–∞–≤—å PDF/DOCX –∫–∞–∫ —Ñ–∞–π–ª (—Å–∫—Ä–µ–ø–∫–æ–π).", thread_id)
        return
    else:
        log.info("–ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞: –∫–ª—é—á–∏=%s", list(message.keys()))
        send_text(chat_id, "–Ø –ø–æ–∫–∞ –ø—Ä–∏–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã (PDF/DOCX).", thread_id)
        return

# ---------- APP ----------
app = Flask(__name__)

@app.get("/healthz")
def healthz():
    return "ok", 200

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ /webhook, –∏ /webhook/<secret>
@app.route("/webhook", methods=["GET", "POST"])
@app.route("/webhook/<secret>", methods=["GET", "POST"])
def webhook(secret: Optional[str] = None):
    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω —Å–µ–∫—Ä–µ—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º
    if ENV["WEBHOOK_SECRET"]:
        if secret is None or secret != ENV["WEBHOOK_SECRET"]:
            # GET/POST –ø–æ "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É" URL ‚Äî 403, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç –∂–∏–≤–æ–π, –Ω–æ —Å–µ–∫—Ä–µ—Ç –Ω–µ —Ç–æ—Ç.
            return "forbidden", 403

    if request.method == "GET":
        # Telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç POST, –Ω–æ GET –¥–µ—Ä–∂–∏–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
        return "ok", 200

    # POST ‚Äî —ç—Ç–æ –æ—Ç Telegram
    try:
        update = request.get_json(force=True, silent=True) or {}
    except Exception:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
        return jsonify({"ok": False, "error": "invalid json"}), 400

    log.info("Incoming update: %s", json.dumps(update)[:2000])
    try:
        handle_update(update)
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞")
        return jsonify({"ok": False}), 500

    return jsonify({"ok": True}), 200

def main():
    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω WEBHOOK_URL)
    set_webhook_if_needed()

    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()

