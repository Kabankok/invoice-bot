# main_web_v2.py
# --- Telegram webhook + GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—á–µ—Ç–æ–≤ (—É—Å—Ç–æ–π—á–∏–≤—ã–π JSON-–ø–∞—Ä—Å–µ—Ä) ---
# –ü–æ—Ç–æ–∫:
#   1) –¥–æ–∫—É–º–µ–Ω—Ç -> [–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å]
#   2) "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" -> GPT -> JSON —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
#   3) ST00012 -> QR -> –ø–æ—è—Å–Ω–µ–Ω–∏–µ -> [–û–ø–ª–∞—Ç–∏—Ç—å/–ó–∞–±—Ä–∞—Ç—å/–û—Ç–º–µ–Ω–∞]
#
# –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
#   - –ü—Ä–æ–º–ø—Ç –ø—Ä–æ—Å–∏—Ç "—Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –æ–±—Ä–∞–º–ª–µ–Ω–∏—è", –Ω–æ –∑–∞—â–∏—Ç–Ω–æ —Å–Ω–∏–º–∞–µ–º ```json ... ```
#   - –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –≤ –æ—Ç–≤–µ—Ç–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç
#   - –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–ª—è (VAT, VAT_Sum) –±–µ–∑ –æ—à–∏–±–æ–∫
#   - –°—É–º–º—É –ø—Ä–∏–≤–æ–¥–∏–º –∫ –∫–æ–ø–µ–π–∫–∞–º (int), –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –≤ —Ä—É–±–ª—è—Ö

import os
import io
import re
import json
import uuid
import logging
from typing import Any, Dict, Optional, Tuple

from flask import Flask, request, jsonify
from urllib.parse import urlencode
import urllib.request

import qrcode
from openai import OpenAI

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
log = logging.getLogger("invoice-bot")

# ------------------- ENV -------------------
def get_env() -> Dict[str, str]:
    bot_token = (os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN") or "").strip()
    webhook_url = (os.getenv("WEBHOOK_URL") or "").strip()
    webhook_secret = (os.getenv("WEBHOOK_SECRET") or "").strip()
    allowed_chat_id = (os.getenv("ALLOWED_CHAT_ID") or "").strip()
    allowed_topic_id = (os.getenv("ALLOWED_TOPIC_ID") or "").strip()
    openai_api_key = (os.getenv("OPENAI_API_KEY") or "").strip()

    if not bot_token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN (–∏–ª–∏ TELEGRAM_BOT_TOKEN).")
    if not openai_api_key:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY.")

    return {
        "BOT_TOKEN": bot_token,
        "WEBHOOK_URL": webhook_url,
        "WEBHOOK_SECRET": webhook_secret,
        "ALLOWED_CHAT_ID": allowed_chat_id,
        "ALLOWED_TOPIC_ID": allowed_topic_id,
        "OPENAI_API_KEY": openai_api_key,
    }

ENV = get_env()
GPT = OpenAI(api_key=ENV["OPENAI_API_KEY"])

# ------------------- –•—Ä–∞–Ω–∏–ª–∏—â–∞ -------------------
PENDING: Dict[str, Dict[str, Any]] = {}
RESULTS: Dict[str, Dict[str, Any]] = {}

# ------------------- TG API -------------------
def tg_api_request(method: str, data: Dict[str, Any]) -> Dict[str, Any]:
    url = f"https://api.telegram.org/bot{ENV['BOT_TOKEN']}/{method}"
    body = urlencode(data).encode("utf-8")
    req = urllib.request.Request(url, data=body, headers={"Content-Type": "application/x-www-form-urlencoded"})
    with urllib.request.urlopen(req, timeout=30) as resp:
        raw = resp.read().decode("utf-8")
    try:
        return json.loads(raw)
    except Exception:
        log.error("TG API invalid JSON: %s", raw)
        return {"ok": False, "raw": raw}

def tg_api_upload_document(file_name: str, blob: bytes, data: Dict[str, Any]) -> Dict[str, Any]:
    boundary = "----WebKitFormBoundary" + uuid.uuid4().hex
    parts = []

    def add_field(name: str, value: str):
        parts.append(f"--{boundary}")
        parts.append(f'Content-Disposition: form-data; name="{name}"')
        parts.append("")
        parts.append(value)

    for k, v in data.items():
        add_field(k, str(v))

    parts.append(f"--{boundary}")
    parts.append(f'Content-Disposition: form-data; name="document"; filename="{file_name}"')
    parts.append("Content-Type: application/octet-stream")
    parts.append("")
    body = b""
    for p in parts:
        body += (p if isinstance(p, bytes) else p.encode("utf-8")) + b"\r\n"
    body += blob + b"\r\n"
    body += f"--{boundary}--".encode("utf-8") + b"\r\n"

    url = f"https://api.telegram.org/bot{ENV['BOT_TOKEN']}/sendDocument"
    req = urllib.request.Request(url, data=body, headers={"Content-Type": f"multipart/form-data; boundary={boundary}"})
    with urllib.request.urlopen(req, timeout=60) as resp:
        raw = resp.read().decode("utf-8")
    try:
        return json.loads(raw)
    except Exception:
        log.error("TG API invalid JSON (upload): %s", raw)
        return {"ok": False, "raw": raw}

def get_file_bytes(file_id: str) -> Tuple[bytes, str]:
    info = tg_api_request("getFile", {"file_id": file_id})
    if not info.get("ok"):
        raise RuntimeError(f"getFile failed: {info}")
    file_path = info["result"]["file_path"]
    url = f"https://api.telegram.org/file/bot{ENV['BOT_TOKEN']}/{file_path}"
    with urllib.request.urlopen(url, timeout=60) as f:
        return f.read(), (file_path.lower())

def send_text(chat_id: int, text: str, thread_id: Optional[int] = None,
              reply_to: Optional[int] = None, reply_markup: Optional[Dict[str, Any]] = None,
              parse_mode: Optional[str] = "Markdown") -> None:
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    if thread_id:
        payload["message_thread_id"] = thread_id
    if reply_to:
        payload["reply_to_message_id"] = reply_to
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup, ensure_ascii=False)
    tg_api_request("sendMessage", payload)

def send_doc(chat_id: int, file_name: str, blob: bytes, caption: str = "", thread_id: Optional[int] = None) -> None:
    data = {"chat_id": chat_id}
    if thread_id:
        data["message_thread_id"] = thread_id
    if caption:
        data["caption"] = caption
        data["parse_mode"] = "Markdown"
    tg_api_upload_document(file_name, blob, data)

# ------------------- –ö–Ω–æ–ø–∫–∏ -------------------
def kb_confirm(token: str) -> Dict[str, Any]:
    return {"inline_keyboard": [[
        {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": f"ok:{token}"},
        {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"no:{token}"},
    ]]}

def kb_after_result(token: str) -> Dict[str, Any]:
    return {"inline_keyboard": [[
        {"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "callback_data": f"pay:{token}"},
        {"text": "üì• –ó–∞–±—Ä–∞—Ç—å", "callback_data": f"get:{token}"},
        {"text": "‚úñ –û—Ç–º–µ–Ω–∞", "callback_data": f"cancel:{token}"},
    ]]}

# ------------------- PROMPT -------------------
PROMPT = (
    "–¢—ã ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –¢–µ–±–µ –¥–∞—é—Ç –¢–ï–ö–°–¢ —Å—á—ë—Ç–∞ (—É–∂–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π/–∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π). "
    "–ù–∞–π–¥–∏ –ø–æ–ª—è –∏ –≤–µ—Ä–Ω–∏ –°–¢–†–û–ì–û –ß–ò–°–¢–´–ô JSON, –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –±–µ–∑ –æ–±—Ä–∞–º–ª–µ–Ω–∏—è ```json. "
    "–ö–ª—é—á–∏:\n"
    "{\n"
    ' "Name": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",\n'
    ' "PersonalAcc": "–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç (20 —Ü–∏—Ñ—Ä)",\n'
    ' "BankName": "–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",\n'
    ' "BIC": "–ë–ò–ö (9 —Ü–∏—Ñ—Ä)",\n'
    ' "CorrespAcc": "–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á—ë—Ç (20 —Ü–∏—Ñ—Ä) –∏–ª–∏ –ø—É—Å—Ç–æ",\n'
    ' "PayeeINN": "–ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)",\n'
    ' "KPP": "–ö–ü–ü (9 —Ü–∏—Ñ—Ä) –∏–ª–∏ –ø—É—Å—Ç–æ",\n'
    ' "Sum": "–°—É–º–º–∞ –≤ –ö–û–ü–ï–ô–ö–ê–• (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)",\n'
    ' "Purpose": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: —è–≤–Ω–æ–µ –∏–∑ —Å—á—ë—Ç–∞, –∏–Ω–∞—á–µ —Å–æ—Å—Ç–∞–≤—å \'–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É ‚Ññ... –æ—Ç ...\'. –ï—Å–ª–∏ –ù–î–° –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –¥–æ–±–∞–≤—å \'–ë–µ–∑ –ù–î–°\'."\n'
    "}\n"
    "–¢–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç. –ù–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–µ–∫—Å—Ç–∞, Markdown."
)

# ------------------- JSON-–ø–∞—Ä—Å–µ—Ä (—É—Å—Ç–æ–π—á–∏–≤—ã–π) -------------------
def _strip_code_fences(s: str) -> str:
    # –°–Ω–∏–º–∞–µ–º ```json ... ``` –∏–ª–∏ ``` ... ```
    s = s.strip()
    if s.startswith("```"):
        s = re.sub(r"^```(?:json)?\s*", "", s, flags=re.IGNORECASE)
        s = re.sub(r"\s*```$", "", s)
    return s.strip()

def _find_first_json_object(s: str) -> Optional[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π {...} –æ–±—ä–µ–∫—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è.
    –£—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ { } –∏ —Å—Ç—Ä–æ–∫–∏.
    """
    start = s.find("{")
    if start == -1:
        return None
    depth = 0
    in_str = False
    esc = False
    for i in range(start, len(s)):
        ch = s[i]
        if in_str:
            if esc:
                esc = False
            elif ch == "\\":
                esc = True
            elif ch == "\"":
                in_str = False
        else:
            if ch == "\"":
                in_str = True
            elif ch == "{":
                depth += 1
            elif ch == "}":
                depth -= 1
                if depth == 0:
                    return s[start:i+1]
    return None

def parse_gpt_json(raw: str) -> Dict[str, Any]:
    """
    –î–µ–ª–∞–µ—Ç –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ: —Å–Ω–∏–º–∞–µ—Ç —Ñ–µ–Ω—Å—ã, –≤—ã–¥—ë—Ä–≥–∏–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π JSON-–æ–±—ä–µ–∫—Ç, –ø–∞—Ä—Å–∏—Ç.
    –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –≤–µ—Ä–Ω—ë—Ç {}.
    """
    if not raw:
        return {}
    s = _strip_code_fences(raw)
    # –∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ/–ø–æ—Å–ª–µ ‚Äî –≤—ã—Ä–µ–∂–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç
    obj = _find_first_json_object(s) or s
    try:
        return json.loads(obj)
    except Exception:
        log.error("parse_gpt_json failed. raw: %s", raw)
        return {}

# ------------------- GPT –≤—ã–∑–æ–≤ -------------------
def gpt_extract_fields(text: str) -> Dict[str, Any]:
    # –°—Ç—Ä–∞—Ö—É–µ–º—Å—è –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –æ—Å—Ç–∞–≤–∏–º —Ä–∞–∑—É–º–Ω—ã–π –ø—Ä–µ–¥–µ–ª
    snippet = text if len(text) <= 32000 else text[:32000]
    resp = GPT.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": PROMPT},
            {"role": "user", "content": snippet}
        ],
        temperature=0
    )
    content = resp.choices[0].message.content.strip() if resp.choices else ""
    if not content:
        return {}
    # –õ–æ–≥–∏—Ä—É–µ–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log.debug("GPT raw content (trimmed): %s", content[:1000])
    return parse_gpt_json(content)

# ------------------- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π -------------------
REQ_KEYS = ["Name","PersonalAcc","BankName","BIC","CorrespAcc","PayeeINN","KPP","Sum","Purpose"]

def to_kop(any_sum: Any) -> int:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º —Å—É–º–º—É –∫ –∫–æ–ø–µ–π–∫–∞–º (int).
    –î–æ–ø—É—Å–∫–∞–µ–º: int –≤ –∫–æ–ø–µ–π–∫–∞—Ö, float/—Å—Ç—Ä–æ–∫—É –≤ —Ä—É–±–ª—è—Ö (—Å —Ç–æ—á–∫–æ–π/–∑–∞–ø—è—Ç–æ–π), —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö.
    """
    if any_sum is None:
        return 0
    # —É–∂–µ —Ü–µ–ª–æ–µ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–ø–µ–π–∫–∏
    if isinstance(any_sum, int):
        return max(any_sum, 0)
    s = str(any_sum).strip().replace(" ", "").replace("\u00A0", "")
    # –µ—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä—É–±–ª–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–æ–ø–µ–π–∫–∏
    if "," in s or "." in s:
        sep = "," if "," in s else "."
        rub, kop = s.split(sep, 1)
        rub = re.sub(r"\D", "", rub or "0")
        kop = re.sub(r"\D", "", kop or "0")[:2].ljust(2, "0")
        try:
            return max(int(rub) * 100 + int(kop), 0)
        except Exception:
            return 0
    # –∏–Ω–∞—á–µ –ø—É—Å—Ç—å —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    s_digits = re.sub(r"\D", "", s)
    try:
        return max(int(s_digits or "0"), 0)
    except Exception:
        return 0

def normalize_fields(f: Dict[str, Any]) -> Dict[str, Any]:
    out = {k: (f.get(k) or "") for k in REQ_KEYS}
    out["Sum"] = to_kop(f.get("Sum"))
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –¥–æ–±–∞–≤–∏–º "–ë–µ–∑ –ù–î–°", –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª–∞
    purpose = str(out.get("Purpose") or "").strip()
    if purpose and ("–ù–î–°" not in purpose.upper()):
        purpose = f"{purpose}; –ë–µ–∑ –ù–î–°"
    if not purpose:
        purpose = "–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É; –ë–µ–∑ –ù–î–°"
    out["Purpose"] = purpose
    # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è ‚Äî —á–∏—Å—Ç–∏–º –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã "|"
    for key in ["Name","PersonalAcc","BankName","BIC","CorrespAcc","PayeeINN","KPP","Purpose"]:
        v = str(out.get(key, "")).replace("|", " ").replace("\r", " ").replace("\n", " ").strip()
        out[key] = v
    return out

# ------------------- ST00012 / QR -------------------
def build_st00012(fields: Dict[str, Any]) -> str:
    parts = ["ST00012"]
    def add(k, v):
        if v:
            parts.append(f"{k}={v}")
    add("Name", fields.get("Name"))
    add("PersonalAcc", fields.get("PersonalAcc"))
    add("BankName", fields.get("BankName"))
    add("BIC", fields.get("BIC"))
    add("CorrespAcc", fields.get("CorrespAcc"))
    add("PayeeINN", fields.get("PayeeINN"))
    add("KPP", fields.get("KPP"))
    if fields.get("Sum"):
        add("Sum", str(fields["Sum"]))
    add("Purpose", fields.get("Purpose"))
    return "|".join(parts)

def make_qr(payload: str) -> bytes:
    img = qrcode.make(payload)
    buf = io.BytesIO()
    img.save(buf, format="PNG")
    return buf.getvalue()

# ------------------- –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ -------------------
def kb_confirm(token: str) -> Dict[str, Any]:
    return {"inline_keyboard": [[
        {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": f"ok:{token}"},
        {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"no:{token}"},
    ]]}

def kb_after_result(token: str) -> Dict[str, Any]:
    return {"inline_keyboard": [[
        {"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "callback_data": f"pay:{token}"},
        {"text": "üì• –ó–∞–±—Ä–∞—Ç—å", "callback_data": f"get:{token}"},
        {"text": "‚úñ –û—Ç–º–µ–Ω–∞", "callback_data": f"cancel:{token}"},
    ]]}

def process_document(ctx: Dict[str, Any]) -> None:
    chat_id = ctx["chat_id"]
    thread_id = ctx.get("thread_id")
    file_id = ctx["file_id"]
    file_name = ctx["file_name"]
    token = ctx["token"]

    # 1) —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    try:
        file_bytes, file_path = get_file_bytes(file_id)
    except Exception as e:
        send_text(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}", thread_id)
        return

    # 2) –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è GPT.
    #    (–ï—Å–ª–∏ —ç—Ç–æ –±–∏–Ω–∞—Ä—å/PDF ‚Äî –∏–Ω–æ–≥–¥–∞ —Ç–∞–º —É–∂–µ —Ç–µ–∫—Å—Ç; –µ—Å–ª–∏ –Ω–µ—Ç, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º.)
    try:
        text = file_bytes.decode("utf-8", errors="ignore")
    except Exception:
        text = ""

    if not text or len(text.strip()) < 30:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –º–∞–ª–æ, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å ‚Äî —á–∞—Å—Ç–æ —Ö–≤–∞—Ç–∞–µ—Ç.
        # –í —Å–ª—É—á–∞–µ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç—ã—Ö —Å–∫–∞–Ω–æ–≤ –±–µ–∑ OCR ‚Äî –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å OCR.
        pass

    # 3) GPT -> –ø–æ–ª—è
    fields_raw = gpt_extract_fields(text)
    if not fields_raw:
        send_text(chat_id, "‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—á—ë—Ç.", thread_id)
        return

    fields = normalize_fields(fields_raw)

    # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
    missing = []
    for k in ["PersonalAcc", "BIC", "PayeeINN", "Sum"]:
        if not fields.get(k):
            missing.append(k)
    if missing:
        send_text(chat_id, "‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ QR: " + ", ".join(missing), thread_id)
        # –¥–∞–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –¥–∞–º–ø
        dbg = json.dumps(fields, ensure_ascii=False, indent=2)
        send_text(chat_id, f"üîé –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n```\n{dbg}\n```", thread_id, parse_mode=None)
        return

    # 4) ST00012 + QR
    st = build_st00012(fields)
    qr_png = make_qr(st)

    RESULTS[token] = {
        "fields": fields,
        "st": st,
        "qr_png": qr_png,
        "file_name": file_name,
    }

    # 5) –û—Ç–≤–µ—Ç
    caption = (
        "*–ü–ª–∞—Ç—ë–∂–Ω—ã–π QR —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (ST00012).* \n\n"
        f"*–ò–ù–ù:* `{fields.get('PayeeINN','-')}`\n"
        f"*–ö–ü–ü:* `{fields.get('KPP','-')}`\n"
        f"*–ë–∞–Ω–∫:* {fields.get('BankName','-')}\n"
        f"*–ë–ò–ö:* `{fields.get('BIC','-')}`\n"
        f"*–ö/—Å:* `{fields.get('CorrespAcc','-')}`\n"
        f"*–†/—Å:* `{fields.get('PersonalAcc','-')}`\n"
        f"*–°—É–º–º–∞:* `{fields['Sum']/100:.2f} ‚ÇΩ`\n"
        f"*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:* {fields.get('Purpose','-')}\n"
    )
    send_doc(chat_id, "qr.png", qr_png, caption=caption, thread_id=thread_id)
    send_text(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", thread_id, reply_markup=kb_after_result(token))

# ------------------- Callbacks -------------------
def handle_callback(cq: Dict[str, Any]) -> None:
    data = cq.get("data") or ""
    msg = cq.get("message") or {}
    chat = (msg.get("chat") or {})
    chat_id = int(chat.get("id"))
    thread_id = msg.get("message_thread_id")

    if data.startswith("ok:"):
        token = data.split(":", 1)[1]
        ctx = PENDING.pop(token, None)
        if not ctx:
            send_text(chat_id, "‚õî –°–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.", thread_id)
            return
        # –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Å—Ä–∞–∑—É –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
        process_document(ctx)
        return

    if data.startswith("no:"):
        token = data.split(":", 1)[1]
        PENDING.pop(token, None)
        send_text(chat_id, "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", thread_id)
        return

    if data.startswith("pay:"):
        token = data.split(":", 1)[1]
        res = RESULTS.get(token)
        if not res:
            send_text(chat_id, "‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ QR –∑–∞–Ω–æ–≤–æ.", thread_id)
            return
        f = res["fields"]
        msg_text = (
            "üí≥ *–û–ø–ª–∞—Ç–∞*\n\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {f.get('Name')}\n"
            f"–ò–ù–ù: {f.get('PayeeINN')}\n"
            f"–ö–ü–ü: {f.get('KPP')}\n"
            f"–ë–∞–Ω–∫: {f.get('BankName')}\n"
            f"–ë–ò–ö: {f.get('BIC')}\n"
            f"–ö/—Å: {f.get('CorrespAcc')}\n"
            f"–†/—Å: {f.get('PersonalAcc')}\n"
            f"–°—É–º–º–∞: {f['Sum']/100:.2f} ‚ÇΩ\n"
            f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {f.get('Purpose')}\n"
        )
        send_text(chat_id, msg_text, thread_id)
        return

    if data.startswith("get:"):
        token = data.split(":", 1)[1]
        res = RESULTS.get(token)
        if not res:
            send_text(chat_id, "‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–¥–∞—á–∏. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ QR –∑–∞–Ω–æ–≤–æ.", thread_id)
            return
        st = res["st"]
        qr_png = res["qr_png"]
        tg_api_upload_document("payment_st00012.txt", st.encode("utf-8"), {
            "chat_id": chat_id,
            "message_thread_id": thread_id or ""
        })
        send_doc(chat_id, "qr.png", qr_png, caption="QR –ø–æ–≤—Ç–æ—Ä–Ω–æ", thread_id=thread_id)
        return

    if data.startswith("cancel:"):
        token = data.split(":", 1)[1]
        RESULTS.pop(token, None)
        send_text(chat_id, "‚úñ –ì–æ—Ç–æ–≤–æ. –°–µ—Å—Å–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—á–∏—Å—Ç–∏–ª.", thread_id)
        return

    send_text(chat_id, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", thread_id)

# ------------------- Update handler -------------------
def passes_filters(msg: Dict[str, Any]) -> bool:
    chat = msg.get("chat") or {}
    chat_id = str(chat.get("id") or "")
    topic_id = msg.get("message_thread_id")
    topic_id_str = str(topic_id) if topic_id is not None else ""
    if ENV["ALLOWED_CHAT_ID"] and chat_id != ENV["ALLOWED_CHAT_ID"]:
        return False
    if ENV["ALLOWED_TOPIC_ID"] and topic_id_str != ENV["ALLOWED_TOPIC_ID"]:
        return False
    return True

def handle_update(update: Dict[str, Any]) -> None:
    cq = update.get("callback_query")
    if cq:
        handle_callback(cq)
        return

    msg = update.get("message") or update.get("edited_message") or {}
    if not msg:
        return
    if not passes_filters(msg):
        return

    chat = msg["chat"]
    chat_id = int(chat["id"])
    thread_id = msg.get("message_thread_id")
    mid = msg.get("message_id")

    if "document" in msg:
        doc = msg["document"]
        file_id = doc["file_id"]
        file_name = doc.get("file_name", "document")
        token = uuid.uuid4().hex[:24]
        PENDING[token] = {
            "chat_id": chat_id,
            "thread_id": thread_id,
            "file_id": file_id,
            "file_name": file_name,
            "token": token,
        }
        send_text(
            chat_id,
            f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: *{file_name}*\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?",
            thread_id,
            reply_to=mid,
            reply_markup=kb_confirm(token)
        )
        return

    if "text" in msg:
        send_text(chat_id, "üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF/DOCX *—Ñ–∞–π–ª–æ–º* (—Å–∫—Ä–µ–ø–∫–æ–π). –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", thread_id)

# ------------------- Flask app -------------------
app = Flask(__name__)

@app.get("/healthz")
def healthz():
    return "ok", 200

@app.route("/webhook", methods=["GET", "POST"])
@app.route("/webhook/<secret>", methods=["GET", "POST"])
def webhook(secret: Optional[str] = None):
    if ENV["WEBHOOK_SECRET"]:
        if secret is None or secret != ENV["WEBHOOK_SECRET"]:
            return "forbidden", 403
    if request.method == "GET":
        return "ok", 200

    update = request.get_json(force=True, silent=True) or {}
    try:
        handle_update(update)
    except Exception:
        log.exception("handler failed")
        return jsonify({"ok": False}), 500
    return jsonify({"ok": True}), 200

def main():
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
