# main_web_v2.py ‚Äî Telegram webhook-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (python-telegram-bot 21.4)
# –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ —Ñ–æ—Ä—É–º–∞ (forum topic) –ø–æ env:
#   ALLOWED_CHAT_ID=-1002904857758
#   ALLOWED_TOPIC_ID=4
# –ò –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é/–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR.

import os
import logging
from typing import Optional

from telegram import Update, Document, Message
from telegram.ext import (
    Application, CallbackQueryHandler, CommandHandler, ContextTypes,
    MessageHandler, filters
)

from keyboards import moderation_keyboard
from moderation import handle_moderation, handle_reason_message
from store import store
from processor import on_approved_send_qr

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("main_web")

TOKEN = os.getenv("BOT_TOKEN", "")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://invoice-bot-xxx.onrender.com/webhook
PORT = int(os.getenv("PORT", "10000"))

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã (—Ç–æ–ª—å–∫–æ —ç—Ç–∞ —Ç–µ–º–∞)
ALLOWED_CHAT_ID = int(os.getenv("ALLOWED_CHAT_ID", "0"))     # –Ω–∞–ø—Ä–∏–º–µ—Ä -1002904857758
ALLOWED_TOPIC_ID = int(os.getenv("ALLOWED_TOPIC_ID", "0"))   # –Ω–∞–ø—Ä–∏–º–µ—Ä 4

def _allowed_topic(update: Update) -> bool:
    msg: Optional[Message] = update.effective_message
    if not msg:
        return False
    chat = update.effective_chat
    if not chat:
        return False
    cid = chat.id
    tid = msg.message_thread_id  # None –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤/PM
    if ALLOWED_CHAT_ID and cid != ALLOWED_CHAT_ID:
        return False
    if ALLOWED_TOPIC_ID and tid != ALLOWED_TOPIC_ID:
        return False
    return True

# ---------- helpers ----------
def _detect_file_type(doc: Document) -> str:
    # document | excel
    name = (doc.file_name or "").lower()
    mt = (doc.mime_type or "").lower()
    if name.endswith((".xlsx", ".xls", ".csv")) or ("excel" in mt):
        return "excel"
    return "document"

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –í –ª–∏—á–∫–µ –æ—Ç–≤–µ—á–∞–µ–º; –≤ –≥—Ä—É–ø–ø–µ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–π —Ç–µ–º—ã
    if update.effective_chat and update.effective_chat.type == "private":
        await update.message.reply_text("–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ\n–ü—Ä–∏—à–ª–∏—Ç–µ —Å—á—ë—Ç –≤ –Ω—É–∂–Ω–æ–π —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã.")
        return
    if not _allowed_topic(update):
        return
    await update.message.reply_text("–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ –≤ —ç—Ç–æ–π —Ç–µ–º–µ ‚úÖ")

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not _allowed_topic(update):
        return
    msg = update.effective_message
    photo = msg.photo[-1]
    file = await context.bot.get_file(photo.file_id)  # –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ–º —Å–µ–π—á–∞—Å
    # —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∏
    text = "üìÑ –°—á—ë—Ç –ø–æ–ª—É—á–µ–Ω ‚Äî –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"
    m = await msg.reply_text(text, reply_markup=moderation_keyboard(), reply_to_message_id=msg.message_id)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    store.put(m.message_id, {
        "src": {
            "file_id": photo.file_id,
            "file_type": "photo",
            "thread_id": msg.message_thread_id
        }
    })

async def on_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not _allowed_topic(update):
        return
    msg = update.effective_message
    doc = msg.document
    if not doc:
        return
    file_type = _detect_file_type(doc)
    text = "üìÑ –°—á—ë—Ç –ø–æ–ª—É—á–µ–Ω ‚Äî –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"
    m = await msg.reply_text(text, reply_markup=moderation_keyboard(), reply_to_message_id=msg.message_id)
    store.put(m.message_id, {
        "src": {
            "file_id": doc.file_id,
            "file_type": file_type,
            "thread_id": msg.message_thread_id
        }
    })

# moderation (approve/decline + –ø—Ä–∏—á–∏–Ω—ã)
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not _allowed_topic(update):
        return
    await handle_moderation(update, context)

async def on_reason_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ–æ–±—â–µ–Ω–∏–µ-–ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–∞–∑–∞ (–º—ã –ø–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ moderation.py)
    if not _allowed_topic(update):
        return
    await handle_reason_message(update, context)

def main() -> None:
    if not TOKEN or not WEBHOOK_URL:
        raise RuntimeError("BOT_TOKEN or WEBHOOK_URL is not set")

    app = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))

    # –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–æ—Ç–æ
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.Document.ALL, on_document))

    # –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    app.add_handler(CallbackQueryHandler(on_callback))

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚Üí –£–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É")
    # —Ñ–∏–ª—å—Ç—Ä ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–≤ moderation.py –≤—ã –æ—Ç–º–µ—á–∞–µ—Ç–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), on_reason_text))

    # –∑–∞–ø—É—Å–∫ webhook
    log.info("Setting webhook to: %s", WEBHOOK_URL)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES,
    )

if __name__ == "__main__":
    main()
