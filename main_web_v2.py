# main_web_v2.py
# --- Telegram webhook —Å –ø–æ–ª–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–æ–≤ ---
# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
#  - /healthz (200 ok)
#  - /webhook –∏ /webhook/<secret> (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
#  - document -> –∫–Ω–æ–ø–∫–∏ [‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å] [‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å]
#  - –ø–æ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏–∑ PDF/DOCX/—Ç–µ–∫—Å—Ç–∞, —Å–±–æ—Ä–∫–∞ ST00012, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR PNG
#  - –æ—Ç–ø—Ä–∞–≤–∫–∞ QR + –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ (–ò–ù–ù/–ö–ü–ü/–±–∞–Ω–∫/—Ä/—Å/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ/–ù–î–°/—Å—É–º–º–∞)
#  - –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: [üí≥ –û–ø–ª–∞—Ç–∏—Ç—å] [üì• –ó–∞–±—Ä–∞—Ç—å] [‚úñ –û—Ç–º–µ–Ω–∞]
#  - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback_query: pay:<token>, get:<token>, cancel:<token>
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
#  - –î–ª—è PDF —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pdfminer.six (—Ç–æ–ª—å–∫–æ "—Ç–µ–∫—Å—Ç–æ–≤—ã–µ" PDF). –°–∫–∞–Ω-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ OCR –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç.
#  - –î–ª—è DOCX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è python-docx.
#  - –ï—Å–ª–∏ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.
#  - –§–æ—Ä–º–∞—Ç QR: ST00012 (–±–∞–Ω–∫–æ–≤—Å–∫–∏–π QR).
#  - VAT (–ù–î–°): –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ Purpose. –ò–Ω–∞—á–µ "–ë–µ–∑ –ù–î–°".
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Flask, qrcode[pil], Pillow, pdfminer.six, python-docx

import os
import io
import re
import json
import uuid
import logging
from dataclasses import dataclass, asdict
from typing import Any, Dict, Optional, Tuple

from flask import Flask, request, abort, jsonify
from urllib.parse import urlencode
import urllib.request

import qrcode

# --- –¥–ª—è DOCX ---
try:
    from docx import Document as DocxDocument
except Exception:
    DocxDocument = None

# --- –¥–ª—è PDF (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ) ---
try:
    from pdfminer.high_level import extract_text as pdf_extract_text
except Exception:
    pdf_extract_text = None

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
log = logging.getLogger("invoice-bot")

# ------------------- ENV -------------------
def get_env() -> Dict[str, str]:
    bot_token = (os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN") or "").strip()
    webhook_url = (os.getenv("WEBHOOK_URL") or "").strip()
    webhook_secret = (os.getenv("WEBHOOK_SECRET") or "").strip()
    allowed_chat_id = (os.getenv("ALLOWED_CHAT_ID") or "").strip()
    allowed_topic_id = (os.getenv("ALLOWED_TOPIC_ID") or "").strip()
    if not bot_token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN (–∏–ª–∏ TELEGRAM_BOT_TOKEN).")

    return {
        "BOT_TOKEN": bot_token,
        "WEBHOOK_URL": webhook_url,
        "WEBHOOK_SECRET": webhook_secret,
        "ALLOWED_CHAT_ID": allowed_chat_id,
        "ALLOWED_TOPIC_ID": allowed_topic_id,
    }

ENV = get_env()

# ------------------- –ú–û–î–ï–õ–ò -------------------
@dataclass
class InvoiceFields:
    Name: str = ""          # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    PersonalAcc: str = ""   # –†/—Å
    BankName: str = ""      # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
    BIC: str = ""           # –ë–ò–ö
    CorrespAcc: str = ""    # –ö/—Å
    PayeeINN: str = ""      # –ò–ù–ù
    KPP: str = ""           # –ö–ü–ü (–µ—Å–ª–∏ –µ—Å—Ç—å)
    Sum: int = 0            # —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    Purpose: str = ""       # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (—Å –ù–î–°/–ë–µ–∑ –ù–î–°)

    def to_st00012(self) -> str:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É ST00012 (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "|", –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ)
        parts = ["ST00012"]
        def add(k, v): 
            if v:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º "|\n\r".
                v = str(v).replace("|", " ").replace("\n", " ").replace("\r", " ").strip()
                parts.append(f"{k}={v}")
        add("Name", self.Name)
        add("PersonalAcc", self.PersonalAcc)
        add("BankName", self.BankName)
        add("BIC", self.BIC)
        add("CorrespAcc", self.CorrespAcc)
        add("PayeeINN", self.PayeeINN)
        add("KPP", self.KPP)
        if self.Sum and self.Sum > 0:
            add("Sum", str(self.Sum))
        add("Purpose", self.Purpose or "–ë–µ–∑ –ù–î–°")
        return "|".join(parts)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Å—Å–∏–π
PENDING: Dict[str, Dict[str, Any]] = {}
RESULTS: Dict[str, Dict[str, Any]] = {}

# ------------------- TG API -------------------
def tg_api_request(method: str, data: Dict[str, Any]) -> Dict[str, Any]:
    url = f"https://api.telegram.org/bot{ENV['BOT_TOKEN']}/{method}"
    body = urlencode(data).encode("utf-8")
    req = urllib.request.Request(url, data=body, headers={"Content-Type": "application/x-www-form-urlencoded"})
    with urllib.request.urlopen(req, timeout=30) as resp:
        raw = resp.read().decode("utf-8")
    try:
        return json.loads(raw)
    except Exception:
        log.error("TG API invalid JSON: %s", raw)
        return {"ok": False, "raw": raw}

def tg_api_upload_document(file_name: str, blob: bytes, data: Dict[str, Any]) -> Dict[str, Any]:
    boundary = "----WebKitFormBoundary" + uuid.uuid4().hex
    lines = []

    for k, v in data.items():
        lines.append(f"--{boundary}")
        lines.append(f'Content-Disposition: form-data; name="{k}"')
        lines.append("")
        lines.append(str(v))

    lines.append(f"--{boundary}")
    lines.append(f'Content-Disposition: form-data; name="document"; filename="{file_name}"')
    lines.append("Content-Type: application/octet-stream")
    lines.append("")
    lines.append(blob)

    lines.append(f"--{boundary}--")

    body = b""
    for part in lines:
        if isinstance(part, bytes):
            body += part + b"\r\n"
        else:
            body += part.encode("utf-8") + b"\r\n"

    url = f"https://api.telegram.org/bot{ENV['BOT_TOKEN']}/sendDocument"
    req = urllib.request.Request(url, data=body, headers={"Content-Type": f"multipart/form-data; boundary={boundary}"})
    with urllib.request.urlopen(req, timeout=60) as resp:
        raw = resp.read().decode("utf-8")
    try:
        return json.loads(raw)
    except Exception:
        log.error("TG API invalid JSON (upload): %s", raw)
        return {"ok": False, "raw": raw}

def set_webhook_if_needed() -> None:
    if not ENV["WEBHOOK_URL"]:
        log.info("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω—è—Ç, –Ω–æ setWebhook –ø—Ä–æ–ø—É—â–µ–Ω.")
        return
    if ENV["WEBHOOK_SECRET"]:
        if not ENV["WEBHOOK_URL"].rstrip("/").endswith(f"/{ENV['WEBHOOK_SECRET']}"):
            log.warning("WEBHOOK_SECRET –∑–∞–¥–∞–Ω, –Ω–æ WEBHOOK_URL –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ '/%s'", ENV["WEBHOOK_SECRET"])
    res = tg_api_request("setWebhook", {"url": ENV["WEBHOOK_URL"]})
    log.info("setWebhook: %s", res)

def send_text(chat_id: int, text: str, thread_id: Optional[int] = None, reply_to: Optional[int] = None,
              reply_markup: Optional[Dict[str, Any]] = None, parse_mode: Optional[str] = "Markdown") -> None:
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    if thread_id:
        payload["message_thread_id"] = thread_id
    if reply_to:
        payload["reply_to_message_id"] = reply_to
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup, ensure_ascii=False)
    tg_api_request("sendMessage", payload)

def send_doc(chat_id: int, file_name: str, blob: bytes, caption: str = "", thread_id: Optional[int] = None) -> None:
    data = {"chat_id": chat_id}
    if thread_id:
        data["message_thread_id"] = thread_id
    if caption:
        data["caption"] = caption
        data["parse_mode"] = "Markdown"
    tg_api_upload_document(file_name, blob, data)

def get_file_bytes(file_id: str) -> Tuple[bytes, str]:
    info = tg_api_request("getFile", {"file_id": file_id})
    if not info.get("ok"):
        raise RuntimeError(f"getFile failed: {info}")
    file_path = info["result"]["file_path"]
    url = f"https://api.telegram.org/file/bot{ENV['BOT_TOKEN']}/{file_path}"
    with urllib.request.urlopen(url, timeout=60) as f:
        return f.read(), (file_path.lower())

# ------------------- –§–ò–õ–¨–¢–†–´ -------------------
def passes_filters(msg: Dict[str, Any]) -> bool:
    chat = msg.get("chat") or {}
    chat_id = str(chat.get("id") or "")
    topic_id = msg.get("message_thread_id")
    topic_id_str = str(topic_id) if topic_id is not None else ""

    if ENV["ALLOWED_CHAT_ID"] and chat_id != ENV["ALLOWED_CHAT_ID"]:
        return False
    if ENV["ALLOWED_TOPIC_ID"] and topic_id_str != ENV["ALLOWED_TOPIC_ID"]:
        return False
    return True

# ------------------- –ü–ê–†–°–ò–ù–ì –°–ß–ï–¢–ê -------------------
def bytes_to_text(file_bytes: bytes, file_path: str) -> str:
    if file_path.endswith(".docx") and DocxDocument:
        try:
            bio = io.BytesIO(file_bytes)
            doc = DocxDocument(bio)
            return "\n".join(p.text for p in doc.paragraphs)
        except Exception:
            log.exception("DOCX parse failed")
    if file_path.endswith(".pdf") and pdf_extract_text:
        try:
            bio = io.BytesIO(file_bytes)
            # pdfminer –æ–∂–∏–¥–∞–µ—Ç –ø—É—Ç—å/—Ñ–∞–π–ª; –∏—Å–ø–æ–ª—å–∑—É–µ–º temp –≤ –ø–∞–º—è—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî –ø–æ—ç—Ç–æ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ
            # –ù–∞ Render FS –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –Ω–æ –ø—Ä–æ—â–µ: pdfminer –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç file-like? –í —Å–≤–µ–∂–µ–π –≤–µ—Ä—Å–∏–∏ high_level.extract_text –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.
            text = pdf_extract_text(bio)  # –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ –¥–ª—è —Å–∫–∞–Ω–æ–≤
            return text or ""
        except Exception:
            log.exception("PDF parse failed")

    # fallback: –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
    try:
        return file_bytes.decode("utf-8", errors="ignore")
    except Exception:
        return ""

def extract_fields_from_text(text: str, default_name: str = "–ü–æ–ª—É—á–∞—Ç–µ–ª—å") -> InvoiceFields:
    # –£–¥–∞–ª–∏–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    t = re.sub(r"[ \t]+", " ", text)
    t = t.replace("\r", "")
    # –†–µ–≥–µ–∫—Å—ã
    inn = re.search(r"(?:–ò–ù–ù|INN)\D*?(\d{10}|\d{12})", t, re.IGNORECASE)
    kpp = re.search(r"(?:–ö–ü–ü)\D*?(\d{9})", t, re.IGNORECASE)
    bic = re.search(r"(?:–ë–ò–ö)\D*?(\d{9})", t, re.IGNORECASE)
    rs = re.search(r"(?:—Ä[./\s-]*—Å[./\s-]*|PersonalAcc|P\/?Acc)\D*?(\d{20})", t, re.IGNORECASE)
    ks = re.search(r"(?:–∫[./\s-]*—Å[./\s-]*|CorrespAcc|K\/?Acc)\D*?(\d{20})", t, re.IGNORECASE)
    bank = re.search(r"(?:–ë–∞–Ω–∫(?: –ø–æ–ª—É—á–∞—Ç–µ–ª—è)?|Bank Name|–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞)\D*?([A-Za-z–ê-–Ø–∞-—è0-9\"¬´¬ª .,-]{6,})", t)
    # –°—É–º–º–∞: –∏—â–µ–º "–ò—Ç–æ–≥–æ", "–ö –æ–ø–ª–∞—Ç–µ", "–°—É–º–º–∞" –∏ —Ç.–ø.
    sum_match = re.search(r"(?:–ò—Ç–æ–≥–æ|–ö –æ–ø–ª–∞—Ç–µ|–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ|–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ|–°—É–º–º–∞)\D*?([\d\s]+[.,]\d{2})", t, re.IGNORECASE)
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    purpose = None
    # –Ø–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    purpose_match = re.search(r"(?:–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞|–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ|–û—Å–Ω–æ–≤–∞–Ω–∏–µ|–ó–∞ —á—Ç–æ)\D*?[:\-‚Äì]\s*(.+)", t, re.IGNORECASE)
    if purpose_match:
        purpose = purpose_match.group(1).strip()
        # –û–±—Ä–µ–∂–µ–º –ø–æ –∫–æ–Ω—Ü—É —Å—Ç—Ä–æ–∫–∏/–¥–≤—É—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        purpose = purpose.split("\n")[0].strip()

    # –ù–î–°
    vat = None
    vat_pct = None
    vat_match = re.search(r"(–ù–î–°)\s*(?:[:\-‚Äì]\s*)?(\d{1,2})\s*%?\s*(?:[,;]|$)", t, re.IGNORECASE)
    if vat_match:
        vat = "–ù–î–°"
        vat_pct = vat_match.group(2)

    # –°—É–º–º–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
    def money_to_kop(m: str) -> int:
        m = m.replace(" ", "").replace("\u00A0", "")
        m = m.replace("—Ä—É–±", "").replace("‚ÇΩ", "")
        m = m.strip()
        if "," in m:
            rub, kop = m.split(",", 1)
        elif "." in m:
            rub, kop = m.split(".", 1)
        else:
            rub, kop = m, "00"
        rub = re.sub(r"\D", "", rub)
        kop = re.sub(r"\D", "", kop)[:2].ljust(2, "0")
        if not rub:
            rub = "0"
        return int(rub) * 100 + int(kop)

    Sum = money_to_kop(sum_match.group(1)) if sum_match else 0

    # –ï—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç ‚Äî —Å–¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
    # (–∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª: —è–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—á–µ—Ç–∞, –∏–Ω–∞—á–µ –Ω–æ–º–µ—Ä/–¥–∞—Ç–∞, –∏–Ω–∞—á–µ "–ë–µ–∑ –ù–î–°/—Å—á–µ—Ç <...>")
    if not purpose:
        # –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –Ω–æ–º–µ—Ä/–¥–∞—Ç—É
        num = re.search(r"(?:–°—á[–µ—ë]—Ç(?:-—Ñ–∞–∫—Ç—É—Ä–∞)?\s*‚Ññ\s*|‚Ññ\s*)([A-Za-z0-9\-_/]+)", t, re.IGNORECASE)
        dt = re.search(r"(\d{2}[./]\d{2}[./]\d{4})", t)
        if num and dt:
            purpose = f"–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É ‚Ññ{num.group(1)} –æ—Ç {dt.group(1)}"
        elif num:
            purpose = f"–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É ‚Ññ{num.group(1)}"
        else:
            purpose = "–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É"

    # –ù–î–° –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
    if vat and vat_pct:
        purpose = f"{purpose}; –ù–î–° {vat_pct}%"
    else:
        # –ï—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–æ—Å—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ù–î–° ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º "–ë–µ–∑ –ù–î–°"
        if "–ù–î–°" not in purpose.upper():
            purpose = f"{purpose}; –ë–µ–∑ –ù–î–°"

    fields = InvoiceFields(
        Name=(bank.group(0).split(":")[0].strip() if False else default_name),  # –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–∞—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ; –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ "–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
        PersonalAcc=rs.group(1) if rs else "",
        BankName=(bank.group(1).strip() if bank else ""),
        BIC=bic.group(1) if bic else "",
        CorrespAcc=ks.group(1) if ks else "",
        PayeeINN=inn.group(1) if inn else "",
        KPP=kpp.group(1) if kpp else "",
        Sum=Sum,
        Purpose=purpose.strip()
    )
    return fields

# ------------------- QR -------------------
def make_qr_png(payload: str) -> bytes:
    img = qrcode.make(payload)
    buf = io.BytesIO()
    img.save(buf, format="PNG")
    return buf.getvalue()

# ------------------- –ö–ù–û–ü–ö–ò -------------------
def kb_confirm(token: str) -> Dict[str, Any]:
    return {"inline_keyboard": [[
        {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": f"ok:{token}"},
        {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"no:{token}"},
    ]]}

def kb_after_result(token: str) -> Dict[str, Any]:
    return {"inline_keyboard": [[
        {"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "callback_data": f"pay:{token}"},
        {"text": "üì• –ó–∞–±—Ä–∞—Ç—å", "callback_data": f"get:{token}"},
        {"text": "‚úñ –û—Ç–º–µ–Ω–∞", "callback_data": f"cancel:{token}"},
    ]]}

# ------------------- –û–°–ù–û–í–ù–û–ô –ü–û–¢–û–ö -------------------
def process_document(ctx: Dict[str, Any]) -> None:
    """
    1) –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    2) –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (PDF/DOCX/utf-8)
    3) –ü–∞—Ä—Å–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã -> InvoiceFields
    4) –°–æ–±–∏—Ä–∞–µ–º ST00012 -> QR PNG
    5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG + –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏ [–û–ø–ª–∞—Ç–∏—Ç—å][–ó–∞–±—Ä–∞—Ç—å]
    """
    chat_id = ctx["chat_id"]
    thread_id = ctx.get("thread_id")
    file_id = ctx["file_id"]
    file_name = ctx["file_name"]
    token = ctx["token"]

    try:
        file_bytes, file_path = get_file_bytes(file_id)
    except Exception as e:
        log.exception("Download failed")
        send_text(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}", thread_id)
        return

    text = bytes_to_text(file_bytes, file_path)
    if not text or len(text) < 30:
        send_text(chat_id,
                  "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF –±–µ–∑ —Ç–µ–∫—Å—Ç–∞. "
                  "–ù—É–∂–µ–Ω OCR ‚Äî –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ (Tesseract/Cloud Vision).",
                  thread_id)
        return

    fields = extract_fields_from_text(text, default_name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å")
    missing = []
    for k in ["PersonalAcc", "BIC", "PayeeINN", "Sum"]:
        if not getattr(fields, k):
            missing.append(k)
    if missing:
        send_text(chat_id,
                  "‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ QR: " + ", ".join(missing) +
                  ". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ —Å—á—ë—Ç–µ –µ—Å—Ç—å –ò–ù–ù, –ë–ò–ö, —Ä/—Å –∏ —Å—É–º–º–∞.",
                  thread_id)
        # –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
        send_text(chat_id, f"üîé –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n```\n{json.dumps(asdict(fields), ensure_ascii=False, indent=2)}\n```",
                  thread_id, parse_mode=None)
        return

    st = fields.to_st00012()
    qr_png = make_qr_png(st)

    # –°–æ—Ö—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∫–Ω–æ–ø–æ–∫
    RESULTS[token] = {
        "fields": fields,
        "st": st,
        "qr_png": qr_png,
        "file_name": file_name,
    }

    caption = (
        "*–ü–ª–∞—Ç—ë–∂–Ω—ã–π QR —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (ST00012).* \n\n"
        f"*–ò–ù–ù:* `{fields.PayeeINN}`\n"
        f"*–ö–ü–ü:* `{fields.KPP or '-'}`\n"
        f"*–ë–∞–Ω–∫:* {fields.BankName or '-'}\n"
        f"*–ë–ò–ö:* `{fields.BIC}`\n"
        f"*–ö/—Å:* `{fields.CorrespAcc or '-'}`\n"
        f"*–†/—Å:* `{fields.PersonalAcc}`\n"
        f"*–°—É–º–º–∞:* `{fields.Sum/100:.2f} ‚ÇΩ`\n"
        f"*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:* {fields.Purpose}\n\n"
        "QR –Ω–∏–∂–µ. –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –Ω–∏–º:"
    )
    send_doc(chat_id, "qr.png", qr_png, caption=caption, thread_id=thread_id)

    # –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    send_text(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", thread_id, reply_markup=kb_after_result(token))

def handle_callback(cq: Dict[str, Any]) -> None:
    data = cq.get("data") or ""
    from_user = cq.get("from") or {}
    msg = cq.get("message") or {}
    chat = (msg.get("chat") or {})
    chat_id = int(chat.get("id"))
    thread_id = msg.get("message_thread_id")

    if data.startswith("ok:"):
        token = data.split(":", 1)[1]
        ctx = PENDING.pop(token, None)
        if not ctx:
            send_text(chat_id, "‚õî –°–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.", thread_id)
            return
        send_text(chat_id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É‚Ä¶", thread_id)
        process_document(ctx)
        return

    if data.startswith("no:"):
        token = data.split(":", 1)[1]
        PENDING.pop(token, None)
        send_text(chat_id, "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", thread_id)
        return

    if data.startswith("pay:"):
        token = data.split(":", 1)[1]
        res = RESULTS.get(token)
        if not res:
            send_text(chat_id, "‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ QR –∑–∞–Ω–æ–≤–æ.", thread_id)
            return
        fields: InvoiceFields = res["fields"]
        st = res["st"]
        # ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª: –¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å–∞–º—É —Å—Ç—Ä–æ–∫—É ST00012 (–µ—ë –ø–æ–Ω–∏–º–∞—é—Ç –±–∞–Ω–∫–∏ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR; –≤—Ä—É—á–Ω—É—é –≤—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ–¥–∫–æ –Ω—É–∂–Ω–æ)
        msg_text = (
            "üí≥ *–û–ø–ª–∞—Ç–∞*\n\n"
            "–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞. "
            "–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∏–∂–µ:\n\n"
            f"*–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {fields.Name or '‚Äî'}\n"
            f"*–ò–ù–ù:* `{fields.PayeeINN}`\n"
            f"*–ö–ü–ü:* `{fields.KPP or '-'}\n"
            f"*–ë–∞–Ω–∫:* {fields.BankName or '-'}\n"
            f"*–ë–ò–ö:* `{fields.BIC}`\n"
            f"*–ö/—Å:* `{fields.CorrespAcc or '-'}\n"
            f"*–†/—Å:* `{fields.PersonalAcc}`\n"
            f"*–°—É–º–º–∞:* `{fields.Sum/100:.2f} ‚ÇΩ`\n"
            f"*–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:* {fields.Purpose}\n\n"
            "_(–¢–µ—Ö. —Å—Ç—Ä–æ–∫–∞ ST00012 –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ó–∞–±—Ä–∞—Ç—å¬ª.)_"
        )
        send_text(chat_id, msg_text, thread_id)
        return

    if data.startswith("get:"):
        token = data.split(":", 1)[1]
        res = RESULTS.get(token)
        if not res:
            send_text(chat_id, "‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–¥–∞—á–∏. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ QR –∑–∞–Ω–æ–≤–æ.", thread_id)
            return
        fields: InvoiceFields = res["fields"]
        st = res["st"]
        qr_png = res["qr_png"]
        # –û—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å ST00012 –∏ —Å–∞–º QR –µ—â—ë —Ä–∞–∑ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        st_bytes = st.encode("utf-8")
        tg_api_upload_document("payment_st00012.txt", st_bytes, {
            "chat_id": chat_id,
            "message_thread_id": thread_id or ""
        })
        send_doc(chat_id, "qr.png", qr_png, caption="–ü–æ–≤—Ç–æ—Ä QR.", thread_id=thread_id)
        return

    if data.startswith("cancel:"):
        token = data.split(":", 1)[1]
        RESULTS.pop(token, None)
        send_text(chat_id, "‚úñ –ì–æ—Ç–æ–≤–æ. –°–µ—Å—Å–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—á–∏—Å—Ç–∏–ª.", thread_id)
        return

    send_text(chat_id, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", thread_id)

def handle_update(update: Dict[str, Any]) -> None:
    # callback_query
    cq = update.get("callback_query")
    if cq:
        handle_callback(cq)
        return

    # message
    message = update.get("message") or update.get("edited_message") or {}
    if not message:
        return
    if not passes_filters(message):
        return

    chat = message["chat"]
    chat_id = int(chat["id"])
    thread_id = message.get("message_thread_id")
    message_id = message.get("message_id")

    if "document" in message:
        doc = message["document"]
        file_id = doc["file_id"]
        file_name = doc.get("file_name", "document")

        token = uuid.uuid4().hex[:24]
        PENDING[token] = {
            "chat_id": chat_id,
            "thread_id": thread_id,
            "file_id": file_id,
            "file_name": file_name,
            "message_id": message_id,
            "token": token,
        }
        send_text(
            chat_id,
            f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: *{file_name}*\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?",
            thread_id,
            reply_to=message_id,
            reply_markup=kb_confirm(token)
        )
        return

    if "text" in message:
        send_text(chat_id, "üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF/DOCX *—Ñ–∞–π–ª–æ–º* (—Å–∫—Ä–µ–ø–∫–æ–π). –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", thread_id)
        return

# ------------------- Flask app -------------------
app = Flask(__name__)

@app.get("/healthz")
def healthz():
    return "ok", 200

@app.route("/webhook", methods=["GET", "POST"])
@app.route("/webhook/<secret>", methods=["GET", "POST"])
def webhook(secret: Optional[str] = None):
    if ENV["WEBHOOK_SECRET"]:
        if secret is None or secret != ENV["WEBHOOK_SECRET"]:
            return "forbidden", 403

    if request.method == "GET":
        return "ok", 200

    try:
        update = request.get_json(force=True, silent=True) or {}
    except Exception:
        log.exception("bad json")
        return jsonify({"ok": False, "error": "invalid json"}), 400

    try:
        handle_update(update)
    except Exception:
        log.exception("handler failed")
        return jsonify({"ok": False}), 500

    return jsonify({"ok": True}), 200

def main():
    set_webhook_if_needed()
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
