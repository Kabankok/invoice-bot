import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

from store import store_invoice
from keyboards import moderation_keyboard
from moderation import handle_moderation

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("RENDER_EXTERNAL_URL") + "/webhook"
ADMIN_IDS = [int(uid) for uid in os.environ.get("ADMIN_USER_IDS", "").split(",") if uid]

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ")

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"Webhook: {WEBHOOK_URL}\nAdmin IDs: {ADMIN_IDS}"
    )

async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"–¢–≤–æ–π user_id: {user.id}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = update.message.effective_attachment
    msg = await update.message.reply_text(
        f"üìÑ –°—á—ë—Ç –ø–æ–ª—É—á–µ–Ω (—Ç–∏–ø: {file.file_unique_id}) ‚Äî –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è",
        reply_markup=moderation_keyboard()
    )
    store_invoice(msg.message_id, status="pending")

# --- Main ---
def main():
    app = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("debug", debug))
    app.add_handler(CommandHandler("whoami", whoami))

    # —Ñ–∞–π–ª—ã
    app.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO, handle_file))

    # –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(handle_moderation))

    # –∑–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path="webhook",
        webhook_url=WEBHOOK_URL,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
