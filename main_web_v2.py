# main_web_v2.py
# --- Telegram webhook + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏ ---
# –ú–∞—Ä—à—Ä—É—Ç—ã: /healthz (200 ok), /webhook –∏ /webhook/<secret>
# –ü–æ—Ç–æ–∫:
#  - document -> inline-–∫–Ω–æ–ø–∫–∏ [–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å]
#  - callback_query "ok:<token>" -> process_document(...) -> –æ—Ç–ø—Ä–∞–≤–∫–∞ QR + –ø–æ—è—Å–Ω–µ–Ω–∏–µ
#  - callback_query "no:<token>" -> –æ—Ç–º–µ–Ω–∞
# –§–∏–ª—å—Ç—Ä—ã: ALLOWED_CHAT_ID / ALLOWED_TOPIC_ID (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã)

import os
import io
import json
import uuid
import logging
from typing import Any, Dict, Optional

from flask import Flask, request, abort, jsonify
from urllib.parse import urlencode
import urllib.request

# –î–ª—è –¥–µ–º–æ-QR (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π):
# pip install qrcode[pil] pillow
import qrcode

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
log = logging.getLogger("tg-webhook")

# ------------------- ENV -------------------
def get_env() -> Dict[str, str]:
    bot_token = (os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN") or "").strip()
    webhook_url = (os.getenv("WEBHOOK_URL") or "").strip()
    webhook_secret = (os.getenv("WEBHOOK_SECRET") or "").strip()
    allowed_chat_id = (os.getenv("ALLOWED_CHAT_ID") or "").strip()
    allowed_topic_id = (os.getenv("ALLOWED_TOPIC_ID") or "").strip()
    if not bot_token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN (–∏–ª–∏ TELEGRAM_BOT_TOKEN).")

    return {
        "BOT_TOKEN": bot_token,
        "WEBHOOK_URL": webhook_url,
        "WEBHOOK_SECRET": webhook_secret,
        "ALLOWED_CHAT_ID": allowed_chat_id,
        "ALLOWED_TOPIC_ID": allowed_topic_id,
    }

ENV = get_env()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ ¬´–æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è¬ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (in-memory)
PENDING: Dict[str, Dict[str, Any]] = {}

# ------------------- TG API -------------------
def tg_api_request(method: str, data: Dict[str, Any]) -> Dict[str, Any]:
    url = f"https://api.telegram.org/bot{ENV['BOT_TOKEN']}/{method}"
    body = urlencode(data).encode("utf-8")
    req = urllib.request.Request(url, data=body, headers={"Content-Type": "application/x-www-form-urlencoded"})
    with urllib.request.urlopen(req, timeout=30) as resp:
        raw = resp.read().decode("utf-8")
    try:
        return json.loads(raw)
    except Exception:
        log.error("TG API invalid JSON: %s", raw)
        return {"ok": False, "raw": raw}

def tg_api_upload(method: str, files: Dict[str, bytes], data: Dict[str, Any]) -> Dict[str, Any]:
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π multipart/form-data (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –ª–∏–±)
    boundary = "----WebKitFormBoundary" + uuid.uuid4().hex
    lines = []

    for k, v in data.items():
        lines.append(f"--{boundary}")
        lines.append(f'Content-Disposition: form-data; name="{k}"')
        lines.append("")
        lines.append(str(v))

    for fname, blob in files.items():
        lines.append(f"--{boundary}")
        lines.append(f'Content-Disposition: form-data; name="document"; filename="{fname}"')
        lines.append("Content-Type: application/octet-stream")
        lines.append("")
        lines.append(blob)

    lines.append(f"--{boundary}--")
    # –°–∫–ª–µ–∏–≤–∞–µ–º —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–∞–π—Ç–æ–≤
    body = b""
    for part in lines:
        if isinstance(part, bytes):
            body += part + b"\r\n"
        else:
            body += part.encode("utf-8") + b"\r\n"

    url = f"https://api.telegram.org/bot{ENV['BOT_TOKEN']}/{method}"
    req = urllib.request.Request(
        url,
        data=body,
        headers={"Content-Type": f"multipart/form-data; boundary={boundary}"}
    )
    with urllib.request.urlopen(req, timeout=60) as resp:
        raw = resp.read().decode("utf-8")
    try:
        return json.loads(raw)
    except Exception:
        log.error("TG API invalid JSON (upload): %s", raw)
        return {"ok": False, "raw": raw}

def set_webhook_if_needed() -> None:
    if not ENV["WEBHOOK_URL"]:
        log.info("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞ (—Å–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω—è—Ç).")
        return
    if ENV["WEBHOOK_SECRET"]:
        if not ENV["WEBHOOK_URL"].rstrip("/").endswith(f"/{ENV['WEBHOOK_SECRET']}"):
            log.warning("WEBHOOK_SECRET –∑–∞–¥–∞–Ω, –Ω–æ WEBHOOK_URL –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ '/%s'", ENV["WEBHOOK_SECRET"])
    log.info("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –≤–µ–±—Ö—É–∫: %s", ENV["WEBHOOK_URL"])
    res = tg_api_request("setWebhook", {"url": ENV["WEBHOOK_URL"]})
    if not res.get("ok"):
        log.error("setWebhook error: %s", res)
    else:
        log.info("setWebhook ok")

def send_text(chat_id: int, text: str, thread_id: Optional[int] = None, reply_to: Optional[int] = None,
              reply_markup: Optional[Dict[str, Any]] = None) -> None:
    payload = {"chat_id": chat_id, "text": text}
    if thread_id:
        payload["message_thread_id"] = thread_id
    if reply_to:
        payload["reply_to_message_id"] = reply_to
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup, ensure_ascii=False)
    tg_api_request("sendMessage", payload)

def send_doc(chat_id: int, file_name: str, blob: bytes, caption: str = "", thread_id: Optional[int] = None) -> None:
    data = {"chat_id": chat_id}
    if thread_id:
        data["message_thread_id"] = thread_id
    if caption:
        data["caption"] = caption
    tg_api_upload("sendDocument", {file_name: blob}, data)

def get_file_bytes(file_id: str) -> bytes:
    # 1) getFile -> file_path
    res = tg_api_request("getFile", {"file_id": file_id})
    if not res.get("ok"):
        raise RuntimeError(f"getFile failed: {res}")
    file_path = res["result"]["file_path"]
    # 2) download
    url = f"https://api.telegram.org/file/bot{ENV['BOT_TOKEN']}/{file_path}"
    with urllib.request.urlopen(url, timeout=60) as f:
        return f.read()

# ------------------- –§–ò–õ–¨–¢–†–´ -------------------
def passes_filters(msg: Dict[str, Any]) -> bool:
    chat = msg.get("chat") or {}
    chat_id = str(chat.get("id") or "")
    topic_id = msg.get("message_thread_id")
    topic_id_str = str(topic_id) if topic_id is not None else ""

    if ENV["ALLOWED_CHAT_ID"] and chat_id != ENV["ALLOWED_CHAT_ID"]:
        return False
    if ENV["ALLOWED_TOPIC_ID"] and topic_id_str != ENV["ALLOWED_TOPIC_ID"]:
        return False
    return True

# ------------------- –û–ë–†–ê–ë–û–¢–ö–ê -------------------
def build_inline_confirm(token: str) -> Dict[str, Any]:
    return {
        "inline_keyboard": [
            [
                {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": f"ok:{token}"},
                {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"no:{token}"},
            ]
        ]
    }

def process_document(ctx: Dict[str, Any]) -> None:
    """
    –ó–¥–µ—Å—å –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è —Ä–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ (GPT),
    –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ù–∏–∂–µ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è:
    - —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    - —Ñ–æ—Ä–º–∏—Ä—É–µ–º ¬´–ø—Å–µ–≤–¥–æ-–ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É¬ª
    - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–∞—Ä—Ç–∏–Ω–∫—É (PNG)
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –Ω–∞–∑–∞–¥ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
    –ó–ê–ú–ï–ù–ò –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    """
    chat_id = ctx["chat_id"]
    thread_id = ctx.get("thread_id")
    file_id = ctx["file_id"]
    file_name = ctx["file_name"]

    try:
        file_bytes = get_file_bytes(file_id)
    except Exception as e:
        log.exception("Download failed")
        send_text(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}", thread_id)
        return

    # TODO: –í–°–¢–ê–í–¨ –°–í–û–ô –ü–ê–ô–ü–õ–ê–ô–ù:
    # 1) fields = extract_invoice_fields(file_bytes)  # –ò–ù–ù, –ö–ü–ü, —Ä/—Å, –±–∞–Ω–∫, —Å—É–º–º–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä.
    # 2) payload = build_payment_string(fields)       # —Å—Ç—Ä–æ–∫–∞ –ø–æ —Ç–≤–æ–∏–º –ø—Ä–∞–≤–∏–ª–∞–º (ST00012/–°–ë–ü/–∏–Ω–æ–µ)
    # 3) qr_png = make_qr_png(payload)
    # –ù–∏–∂–µ ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π payload (–ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –∫–Ω–æ–ø–∫–∏ ‚Üí –æ—Ç–≤–µ—Ç —Å QR):
    payload = f"INVOICE:{file_name}"
    img = qrcode.make(payload)
    buf = io.BytesIO()
    img.save(buf, format="PNG")
    qr_png = buf.getvalue()

    caption = (
        "üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–¥–µ–º–æ).\n\n"
        "‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {fn}\n"
        "‚Ä¢ Payload –≤ QR: \"{pl}\"\n\n"
        "–ó–∞–º–µ–Ω—é –¥–µ–º–æ-–ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ —Ç–≤–æ–π –ø–∞–π–ø–ª–∞–π–Ω (GPT‚Üí—Ä–µ–∫–≤–∏–∑–∏—Ç—ã‚ÜíQR) ‚Äî —Å–∫–∞–∂–∏, –∏ –ø–æ–¥–∫–ª—é—á—É —Ñ—É–Ω–∫—Ü–∏–∏."
    ).format(fn=file_name, pl=payload)

    send_doc(chat_id, "qr.png", qr_png, caption=caption, thread_id=thread_id)

def handle_update(update: Dict[str, Any]) -> None:
    # 1) callback_query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)
    cq = update.get("callback_query")
    if cq:
        data = cq.get("data") or ""
        from_user = cq.get("from") or {}
        user_id = str(from_user.get("id") or "")
        msg = cq.get("message") or {}
        chat = (msg.get("chat") or {})
        chat_id = int(chat.get("id"))
        thread_id = msg.get("message_thread_id")

        if data.startswith("ok:"):
            token = data.split(":", 1)[1]
            ctx = PENDING.pop(token, None)
            if not ctx:
                send_text(chat_id, "‚õî –ò—Å—Ç–µ–∫–ª–∞ —Å–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.", thread_id)
                return
            send_text(chat_id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É‚Ä¶", thread_id)
            process_document(ctx)
            return

        elif data.startswith("no:"):
            token = data.split(":", 1)[1]
            PENDING.pop(token, None)
            send_text(chat_id, "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", thread_id)
            return

        else:
            send_text(chat_id, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", thread_id)
            return

    # 2) –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (document / text)
    message = update.get("message") or update.get("edited_message") or {}
    if not message:
        return
    if not passes_filters(message):
        return

    chat = message["chat"]
    chat_id = int(chat["id"])
    thread_id = message.get("message_thread_id")
    message_id = message.get("message_id")

    if "document" in message:
        doc = message["document"]
        file_id = doc["file_id"]
        file_name = doc.get("file_name", "document")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏
        token = uuid.uuid4().hex[:24]
        PENDING[token] = {
            "chat_id": chat_id,
            "thread_id": thread_id,
            "file_id": file_id,
            "file_name": file_name,
            "message_id": message_id,
        }

        kb = build_inline_confirm(token)
        send_text(
            chat_id,
            f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: *{file_name}*\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?",
            thread_id,
            reply_to=message_id,
            reply_markup=kb
        )
        return

    if "text" in message:
        send_text(
            chat_id,
            "üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF/DOCX *—Ñ–∞–π–ª–æ–º* (—Å–∫—Ä–µ–ø–∫–æ–π). –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            thread_id
        )
        return

# ------------------- Flask app -------------------
app = Flask(__name__)

@app.get("/healthz")
def healthz():
    return "ok", 200

@app.route("/webhook", methods=["GET", "POST"])
@app.route("/webhook/<secret>", methods=["GET", "POST"])
def webhook(secret: Optional[str] = None):
    # —Å–µ–∫—å—é—Ä–Ω–æ—Å—Ç—å –ø–æ —Å–µ–∫—Ä–µ—Ç—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if ENV["WEBHOOK_SECRET"]:
        if secret is None or secret != ENV["WEBHOOK_SECRET"]:
            return "forbidden", 403

    if request.method == "GET":
        return "ok", 200

    try:
        update = request.get_json(force=True, silent=True) or {}
    except Exception:
        log.exception("bad json")
        return jsonify({"ok": False, "error": "invalid json"}), 400

    try:
        handle_update(update)
    except Exception:
        log.exception("handler failed")
        return jsonify({"ok": False}), 500

    return jsonify({"ok": True}), 200

def main():
    set_webhook_if_needed()
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
