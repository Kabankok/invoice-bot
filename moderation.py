# moderation.py ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
from __future__ import annotations
import os
from typing import Dict, Tuple
from telegram import Update
from telegram.ext import ContextTypes

from store import store, WAIT, APPROVED, REJECTED, PAID, RECEIVED
from keyboards import (
    moderation_keyboard,
    APPROVE_CB, REJECT_CB, REASON_CB, PAID_CB, RECEIVED_CB,
)

ADMIN_USER_IDS = {int(x) for x in os.getenv("ADMIN_USER_IDS", "").split(",") if x.strip().isdigit()}

# user_id -> (chat_id, status_msg_id) ‚Äî –æ–∂–∏–¥–∞–µ–º –æ–¥–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
WAITING_REASON: Dict[int, Tuple[int, int]] = {}


def _human_status(code: str) -> str:
    return {
        WAIT: "–û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è",
        APPROVED: "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω",
        REJECTED: "–û—Ç–∫–ª–æ–Ω—ë–Ω",
        PAID: "–û–ø–ª–∞—á–µ–Ω",
        RECEIVED: "–ü–æ–ª—É—á–µ–Ω",
    }.get(code, code)


def build_status_text(inv: dict) -> str:
    status = _human_status(inv.get("status", WAIT))
    reason = inv.get("reason") or ""
    lines = ["üìÑ –°—á—ë—Ç", f"–°—Ç–∞—Ç—É—Å: {status}"]
    if inv.get("status") == REJECTED and reason:
        lines.append(f"–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    return "
".join(lines)


async def handle_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()

    user_id = q.from_user.id if q.from_user else 0
    if ADMIN_USER_IDS and user_id not in ADMIN_USER_IDS:
        await q.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é.")
        return

    data = (q.data or "").split(":")
    action = data[0] if data else ""
    chat_id = q.message.chat_id
    status_msg_id = q.message.message_id  # –∫–Ω–æ–ø–∫–∏ –∂–∏–≤—É—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

    inv = store.get(status_msg_id) or {"status": WAIT, "reason": ""}

    if action == APPROVE_CB:
        store.set_status(status_msg_id, APPROVED)
    elif action == REJECT_CB:
        store.set_status(status_msg_id, REJECTED)
    elif action == REASON_CB:
        WAITING_REASON[user_id] = (chat_id, status_msg_id)
        await q.message.reply_text("üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å—á—ë—Ç–∞.")
        return
    elif action == PAID_CB:
        store.set_status(status_msg_id, PAID)
    elif action == RECEIVED_CB:
        store.set_status(status_msg_id, RECEIVED)
    else:
        await q.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    inv = store.get(status_msg_id) or inv
    await q.edit_message_text(
        text=build_status_text(inv),
        reply_markup=moderation_keyboard(chat_id, status_msg_id),
    )


async def handle_reason_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user:
        return
    pending = WAITING_REASON.get(user.id)
    if not pending:
        return  # –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    chat_id, status_msg_id = pending
    reason_text = (update.effective_message.text or "").strip()
    store.set_reason(status_msg_id, reason_text)

    inv = store.get(status_msg_id) or {}
    WAITING_REASON.pop(user.id, None)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=status_msg_id,
        text=build_status_text(inv),
        reply_markup=moderation_keyboard(chat_id, status_msg_id),
    )
    await update.effective_message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
