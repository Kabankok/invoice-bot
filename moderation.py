from __future__ import annotations
import os
from typing import Set, Tuple
from telegram import Update
from telegram.ext import ContextTypes


from store import STORE, STATUS_OK, STATUS_REJ
from keyboards import parse_callback, APPROVE_CB, REJECT_CB


# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∞–¥–º–∏–Ω—ã), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏
ADMIN_USER_IDS: Set[int] = {
int(x) for x in os.getenv("ADMIN_USER_IDS", "").split(",") if x.strip().isdigit()
}


def build_status_caption(invoice: dict) -> str:
status = invoice.get("status", "?")
kind = invoice.get("kind", "?")
return (
"üìÑ –°—á—ë—Ç\n"
f"–°—Ç–∞—Ç—É—Å: {status}\n"
f"–¢–∏–ø —Ñ–∞–π–ª–∞: {kind}\n"
"(–ñ—É—Ä–Ω–∞–ª/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)"
)


async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
q = update.callback_query
if not q:
return
await q.answer()


user_id = q.from_user.id if q.from_user else 0
if ADMIN_USER_IDS and user_id not in ADMIN_USER_IDS:
await q.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é.")
return


try:
action, chat_id, msg_id = parse_callback(q.data or "")
except Exception:
await q.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
return


key = (chat_id, msg_id)
invoice = STORE.get(key)
if not invoice:
await q.reply_text("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è)")
return


if action == APPROVE_CB:
invoice["status"] = STATUS_OK
elif action == REJECT_CB:
invoice["status"] = STATUS_REJ
else:
await q.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
return


status_msg_id = invoice.get("status_msg_id")
if isinstance(status_msg_id, int):
await context.bot.edit_message_text(
chat_id=chat_id,
message_id=status_msg_id,
text=build_status_caption(invoice),
)
await q.reply_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")