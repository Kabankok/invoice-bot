#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
main_web.py ‚Äî –®–∞–≥ 2 (–º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∞–º–∏: ‚úîÔ∏è –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å / ‚úñÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å)
-----------------------------------------------------------------------
MVP-–ª–æ–≥–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—Ä—è–º–æ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ (–ø–æ–∑–∂–µ –≤—ã–Ω–µ—Å–µ–º –≤ keyboards.py/moderation.py):
- –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ–º—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
- –ü–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–æ–∫ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∞–∂–∞–ª –∞–¥–º–∏–Ω (–∏–∑ ADMIN_USER_IDS),
  –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
- –ñ—É—Ä–Ω–∞–ª —Å—Ç–∞—Ç—É—Å–æ–≤ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞). –ù–∞ –ø—Ä–æ–¥–µ –≤—ã–Ω–µ—Å–µ–º –≤ store.py/–ë–î.

ENV, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ Render ‚Üí Environment:
- TELEGRAM_BOT_TOKEN
- WEBHOOK_URL = https://<–∏–º—è>.onrender.com/webhook
- ADMIN_USER_IDS = 111111111,222222222   (—Å–ø–∏—Å–æ–∫ Telegram user_id, —É –∫–æ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–æ –∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏)

requirements.txt:
  python-telegram-bot[webhooks]==21.4
"""
from __future__ import annotations
import os
import logging
from typing import Dict, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatType
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ============================ –ö–æ–Ω—Ñ–∏–≥/–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==============================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("main_web")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://<name>.onrender.com/webhook
PORT = int(os.getenv("PORT", "10000"))

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å
ADMIN_USER_IDS = {
    int(x) for x in os.getenv("ADMIN_USER_IDS", "").split(",") if x.strip().isdigit()
}

if not TELEGRAM_BOT_TOKEN:
    raise SystemExit("TELEGRAM_BOT_TOKEN is required")

# ============================ –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ (MVP) ===========================
# –ö–ª—é—á —Å—á—ë—Ç–∞: (chat_id, message_id). –ó–Ω–∞—á–µ–Ω–∏–µ: —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏ —Ç–∏–ø–æ–º.
INVOICES: Dict[Tuple[int, int], Dict[str, str]] = {}

STATUS_WAIT = "–û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"
STATUS_OK = "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω"
STATUS_REJ = "–û—Ç–∫–ª–æ–Ω—ë–Ω"

# ============================ –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ =================================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    msg = update.effective_message or update.channel_post
    if not chat or not msg:
        return
    thread_id = getattr(msg, "message_thread_id", None)
    text = (
        "–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ
"
        "–ü—Ä–∏—à–ª–∏—Ç–µ PDF/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/Excel ‚Äî –¥–æ–±–∞–≤–ª—é –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.
"
        f"(chat_id={chat.id}, thread_id={thread_id})"
    )
    if hasattr(msg, "reply_text"):
        await msg.reply_text(text)
    else:
        await context.bot.send_message(chat_id=chat.id, text=text)

async def cmd_debug(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    info = await context.bot.get_webhook_info()
    me = await context.bot.get_me()
    text = (
        "üîé Webhook debug:
"
        f"bot: @{me.username} (id={me.id})
"
        f"url: {info.url or '‚Äî'}
"
        f"pending_update_count: {info.pending_update_count}
"
        f"admins: {sorted(list(ADMIN_USER_IDS))}"
    )
    msg = update.effective_message or update.channel_post
    chat = update.effective_chat
    if msg and hasattr(msg, "reply_text"):
        await msg.reply_text(text)
    elif chat:
        await context.bot.send_message(chat_id=chat.id, text=text)

# ============================ –ö–Ω–æ–ø–∫–∏ –∏ –∫–æ–ª–ª–±—ç–∫–∏ ===============================
APPROVE_CB = "approve"
REJECT_CB = "reject"

def approval_keyboard(invoice_key: Tuple[int, int]) -> InlineKeyboardMarkup:
    chat_id, msg_id = invoice_key
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úîÔ∏è –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data=f"{APPROVE_CB}:{chat_id}:{msg_id}"),
            InlineKeyboardButton("‚úñÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"{REJECT_CB}:{chat_id}:{msg_id}"),
        ]
    ])

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()

    user_id = q.from_user.id if q.from_user else 0
    if ADMIN_USER_IDS and user_id not in ADMIN_USER_IDS:
        await q.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é.")
        return

    data = q.data or ""
    parts = data.split(":")
    if len(parts) != 3:
        await q.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
        return

    action, chat_id_s, msg_id_s = parts
    try:
        key = (int(chat_id_s), int(msg_id_s))
    except ValueError:
        await q.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã")
        return

    invoice = INVOICES.get(key)
    if not invoice:
        await q.reply_text("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞)")
        return

    if action == APPROVE_CB:
        invoice["status"] = STATUS_OK
        new_caption = build_status_caption(invoice)
        await context.bot.edit_message_text(
            chat_id=key[0],
            message_id=invoice["status_msg_id"],
            text=new_caption,
        )
        await q.reply_text("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ. –î–∞–ª—å—à–µ –ø–æ–¥–∫–ª—é—á–∏–º GPT/QR –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.")
    elif action == REJECT_CB:
        invoice["status"] = STATUS_REJ
        new_caption = build_status_caption(invoice)
        await context.bot.edit_message_text(
            chat_id=key[0],
            message_id=invoice["status_msg_id"],
            text=new_caption,
        )
        await q.reply_text("üõë –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω—ã/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ.")

# ============================ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ ================================
async def handle_file_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    msg = update.effective_message
    if not chat or not msg:
        return

    thread_id = getattr(msg, "message_thread_id", None)
    kind = detect_kind_from_message(msg)
    key = (chat.id, msg.message_id)

    INVOICES[key] = {"status": STATUS_WAIT, "kind": kind}

    log.info(
        "Got FILE(message) | chat_id=%s thread_id=%s user_id=%s kind=%s",
        chat.id,
        thread_id,
        getattr(getattr(msg, 'from_user', None), 'id', None),
        kind,
    )

    text = (
        "üìÑ –°—á—ë—Ç –ø–æ–ª—É—á–µ–Ω.
"
        f"–°—Ç–∞—Ç—É—Å: {STATUS_WAIT}
"
        f"–¢–∏–ø —Ñ–∞–π–ª–∞: {kind}
"
        f"chat_id: {chat.id}, message_id: {msg.message_id}
"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    sent = await msg.reply_text(text, reply_markup=approval_keyboard(key))
    INVOICES[key]["status_msg_id"] = sent.message_id

async def handle_file_channel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    post = update.channel_post
    if not chat or not post:
        return

    kind = detect_kind_from_message(post)
    key = (chat.id, post.message_id)
    INVOICES[key] = {"status": STATUS_WAIT, "kind": kind}

    log.info("Got FILE(channel_post) | chat_id=%s kind=%s", chat.id, kind)

    text = (
        "üìÑ –°—á—ë—Ç –ø–æ–ª—É—á–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ.
"
        f"–°—Ç–∞—Ç—É—Å: {STATUS_WAIT}
"
        f"–¢–∏–ø —Ñ–∞–π–ª–∞: {kind}
"
        f"chat_id: {chat.id}, message_id: {post.message_id}
"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    sent = await context.bot.send_message(chat_id=chat.id, text=text, reply_markup=approval_keyboard(key))
    INVOICES[key]["status_msg_id"] = sent.message_id

# ============================ –£—Ç–∏–ª–∏—Ç—ã =========================================
def detect_kind_from_message(msg) -> str:
    if getattr(msg, 'photo', None):
        return 'photo'
    if getattr(msg, 'document', None):
        mime = (msg.document.mime_type or '').lower()
        if mime in {"application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}:
            return 'excel'
        return 'document'
    return 'unknown'

def build_status_caption(invoice: Dict[str, str]) -> str:
    status = invoice.get("status", "?")
    kind = invoice.get("kind", "?")
    return (
        "üìÑ –°—á—ë—Ç
"
        f"–°—Ç–∞—Ç—É—Å: {status}
"
        f"–¢–∏–ø —Ñ–∞–π–ª–∞: {kind}
"
        "(–ñ—É—Ä–Ω–∞–ª/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)"
    )

# ========================= –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==================================
async def _post_init(app):
    me = await app.bot.get_me()
    log.info("Bot getMe: username=@%s id=%s", me.username, me.id)


def main() -> None:
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).post_init(_post_init).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("debug", cmd_debug))

    # –ö–Ω–æ–ø–æ—á–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∏
    app.add_handler(CallbackQueryHandler(on_callback))

    # –§–∞–π–ª—ã –∏–∑ –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø/–õ–°
    app.add_handler(MessageHandler((filters.Document.ALL | filters.PHOTO) & ~filters.ChatType.CHANNEL, handle_file_message))

    # –§–∞–π–ª—ã –∏–∑ –ö–ê–ù–ê–õ–û–í (channel_post)
    app.add_handler(MessageHandler((filters.Document.ALL | filters.PHOTO) & filters.ChatType.CHANNEL, handle_file_channel))

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/webhook",
        webhook_url=WEBHOOK_URL or None,
        drop_pending_updates=True,
    )


if __name__ == "__main__":
    main()
