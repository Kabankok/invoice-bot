#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
main_web_v2.py ‚Äî –º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç ENV:
  TELEGRAM_BOT_TOKEN
  WEBHOOK_URL (–ø–æ–ª–Ω—ã–π URL –≤–∏–¥–∞ https://<name>.onrender.com/webhook)
  PORT (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000)

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
  python-telegram-bot[webhooks]==21.4
–§–∞–π–ª—ã-–º–æ–¥—É–ª–∏ (—Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º):
  store.py         ‚Äî –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (store, store_invoice)
  keyboards.py     ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (moderation_keyboard, APPROVE_CB/REJECT_CB)
  moderation.py    ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π (handle_moderation)
"""

from __future__ import annotations

import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from store import store_invoice
from keyboards import moderation_keyboard
from moderation import handle_moderation

# ------------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("main_web_v2")

# ------------------------- ENV -------------------------
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "")
PORT = int(os.environ.get("PORT", "10000"))

if not TOKEN:
    raise SystemExit("TELEGRAM_BOT_TOKEN is missing")
if not WEBHOOK_URL:
    raise SystemExit("WEBHOOK_URL is missing (e.g. https://<name>.onrender.com/webhook)")

# ------------------------- –ö–æ–º–∞–Ω–¥—ã -------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    msg = update.effective_message or update.channel_post
    if not chat or not msg:
        return
    thread_id = getattr(msg, "message_thread_id", None)
    text = (
        "–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ PDF/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/Excel ‚Äî –¥–æ–±–∞–≤–ª—é –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.\n"
        f"(chat_id={chat.id}, thread_id={thread_id})"
    )
    if hasattr(msg, "reply_text"):
        await msg.reply_text(text)
    else:
        # –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        await context.bot.send_message(chat_id=chat.id, text=text)

async def cmd_debug(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    info = await context.bot.get_webhook_info()
    me = await context.bot.get_me()
    text = (
        "üîé Webhook debug:\n"
        f"bot: @{me.username} (id={me.id})\n"
        f"url: {info.url or '‚Äî'}\n"
        f"pending_update_count: {info.pending_update_count}\n"
    )
    msg = update.effective_message or update.channel_post
    chat = update.effective_chat
    if msg and hasattr(msg, "reply_text"):
        await msg.reply_text(text)
    elif chat:
        await context.bot.send_message(chat_id=chat.id, text=text)

async def cmd_whoami(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    uid = user.id if user else None
    await update.effective_message.reply_text(f"–í–∞—à user_id: {uid}")

# ------------------------- –£—Ç–∏–ª–∏—Ç—ã -------------------------
def detect_kind_from_message(msg) -> str:
    if getattr(msg, "photo", None):
        return "photo"
    if getattr(msg, "document", None):
        mime = (msg.document.mime_type or "").lower()
        if mime in {
            "application/vnd.ms-excel",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        }:
            return "excel"
        return "document"
    return "unknown"

# ------------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ -------------------------
async def handle_file_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–∞–π–ª—ã –∏–∑ –õ–°/–≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø/—Ç–µ–º (message)."""
    chat = update.effective_chat
    msg = update.effective_message
    if not chat or not msg:
        return

    thread_id = getattr(msg, "message_thread_id", None)
    kind = detect_kind_from_message(msg)
    key_chat_id = chat.id
    key_message_id = msg.message_id

    log.info(
        "Got FILE(message) | chat_id=%s thread_id=%s user_id=%s kind=%s",
        chat.id,
        thread_id,
        getattr(getattr(msg, "from_user", None), "id", None),
        kind,
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ message_id (MVP)
    store_invoice(key_message_id, status="pending")

    text = (
        "üìÑ –°—á—ë—Ç –ø–æ–ª—É—á–µ–Ω.\n"
        "–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è\n"
        f"–¢–∏–ø —Ñ–∞–π–ª–∞: {kind}\n"
        f"chat_id: {key_chat_id}, message_id: {key_message_id}\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    sent = await msg.reply_text(
        text,
        reply_markup=moderation_keyboard(key_chat_id, key_message_id),
    )
    # –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ v2 –º—ã –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ¬´—Å—Ç–∞—Ç—É—Å–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞,
    # –º–æ–¥—É–ª—å moderation.py –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–ª–ª–±—ç–∫—É.

async def handle_file_channel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–∞–π–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ (channel_post). –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞."""
    chat = update.effective_chat
    post = update.channel_post
    if not chat or not post:
        return

    kind = detect_kind_from_message(post)
    key_chat_id = chat.id
    key_message_id = post.message_id

    log.info("Got FILE(channel_post) | chat_id=%s kind=%s", chat.id, kind)

    store_invoice(key_message_id, status="pending")

    text = (
        "üìÑ –°—á—ë—Ç –ø–æ–ª—É—á–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ.\n"
        "–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è\n"
        f"–¢–∏–ø —Ñ–∞–π–ª–∞: {kind}\n"
        f"chat_id: {key_chat_id}, message_id: {key_message_id}\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    await context.bot.send_message(
        chat_id=key_chat_id,
        text=text,
        reply_markup=moderation_keyboard(key_chat_id, key_message_id),
    )

# ------------------------- –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -------------------------
async def _post_init(app):
    me = await app.bot.get_me()
    log.info("Bot getMe: username=@%s id=%s", me.username, me.id)

def main() -> None:
    app = ApplicationBuilder().token(TOKEN).post_init(_post_init).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("debug", cmd_debug))
    app.add_handler(CommandHandler("whoami", cmd_whoami))

    # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–∫–æ–ª–ª–±—ç–∫)
    app.add_handler(CallbackQueryHandler(handle_moderation))

    # –§–∞–π–ª—ã: –≥—Ä—É–ø–ø—ã/—Ç–µ–º—ã/–õ–°
    app.add_handler(
        MessageHandler(
            (filters.Document.ALL | filters.PHOTO) & ~filters.ChatType.CHANNEL,
            handle_file_message,
        )
    )
    # –§–∞–π–ª—ã: –∫–∞–Ω–∞–ª—ã
    app.add_handler(
        MessageHandler(
            (filters.Document.ALL | filters.PHOTO) & filters.ChatType.CHANNEL,
            handle_file_channel,
        )
    )

    # –í–µ–±—Ö—É–∫
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/webhook",         # —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç —Ä–æ–≤–Ω–æ —ç—Ç–æ—Ç –ø—É—Ç—å
        webhook_url=WEBHOOK_URL,     # –ø–æ–ª–Ω—ã–π URL –∏–∑ ENV
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
